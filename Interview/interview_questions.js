// DSA Question
// 1)Given an array arr[], the task is to find the subarray that has the maximum sum and return its sum.
// 	const arr = [21, 13, -8, 4, -1, 22, 3, -1, 85, 47];
// 2)Given a string s, find the length of the longest substring without repeating characters.
// 	Input: s = "abcabcbbfpdpdf"
// 3)Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers.
// 	Input: nums = [-1,2,1,-4], target = 1
 
// 4)Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums. You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.
// 	Input: nums = [1,2,0]

// Javascript Question
// 1)Given an array arr and a function fn, return a sorted array sortedArr. You can assume fn only returns numbers and those numbers determine the sort order of sortedArr. sortedArr must be sorted in ascending order by fn output. You may assume that fn will never duplicate numbers for a given array.
// 	Input: arr = [5, 4, 1, 2, 3], fn = (x) => x
 
// 2)Given two promises promise1 and promise2, return a new promise. promise1 and promise2 will both resolve with a number. The returned promise should resolve with the sum of the two numbers.
// 	Input: 
// 		promise1 = new Promise(resolve => setTimeout(() => resolve(2), 20)), 
// 		promise2 = new Promise(resolve => setTimeout(() => resolve(5), 60))

 
// 3)Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.
// 	Input: nums = [1,4,3,2]
// 4)Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers. Return any array that satisfies this condition.
// Input: nums = [3,1,2,4]
 
 
// 5)You are given two strings s and t. 
// String t is generated by random shuffling string s and then add one more letter at a random position. Return the letter that was added to t.
// Input: s = "abcd", t = "abcde"
// 6)Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
// 	Input: x = 123
// 7)Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
// 	Input: n = 3
// 8)Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
 
// 9)The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.
// 	Input: candidates = [2,3,6,7], target = 7
// 10)Implement pow(x, n), which calculates x raised to the power n (i.e., xn).
// 	Input: x = 2.00000, n = 10
// 11)You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's. Increment the large integer by one and return the resulting array of digits.
// Input: digits = [4,3,2,1]